name: Build Tauri App

on:
  push:
    branches:
      - main 
  pull_request: {}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        arch:
          - x86_64
          - aarch64
        include:
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20.12.2 

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.arch }}-${{ matrix.os == 'macos-latest' && 'apple-darwin' || matrix.os == 'ubuntu-latest' && 'unknown-linux-gnu' || 'pc-windows-msvc' }}
        profile: minimal

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install

    - name: Install Tauri dependencies
      run: |
        brew install xcodegen

    - name: Decrypt and Import Certificate
      run: |
        echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k ~/Library/Keychains/login.keychain-db -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "runner" ~/Library/Keychains/login.keychain-db



    - name: Build Tauri app
      env:
        TAURI_BUILD_TARGET: ${{ matrix.arch }}-${{ matrix.os == 'macos-latest' && 'apple-darwin' || matrix.os == 'ubuntu-latest' && 'unknown-linux-gnu' || 'pc-windows-msvc' }}
      run: pnpm run tauri build

    - name: Sign Application
      run: |
        codesign --sign "Developer ID Application: ${{ secrets.SIGN_IDENTITY }}"  --deep --force --verbose=2 src-tauri/target/release/bundle/macos/tauri-app2.app

    #- name: Verify Code Signing
      #run: |
        #codesign --verify --deep --strict --verbose=2 src-tauri/target/release/bundle/macos/*.app

    - name: Compress build output on Linux/macOS
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      run: zip -r Tauri-${{ matrix.os }}-${{ matrix.arch }}.zip src-tauri/target/release/bundle/
      
    - name: Compress build output on Windows
      if: startsWith(matrix.os, 'windows')
      run: Compress-Archive -Path src-tauri/target/release/bundle/* -DestinationPath Tauri-${{ matrix.os }}-${{ matrix.arch }}.zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Tauri-${{ matrix.os }}-${{ matrix.arch }}
        path: Tauri-${{ matrix.os }}-${{ matrix.arch }}.zip
      
